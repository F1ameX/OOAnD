from pyrogram import filters
from commandHandler import CommandHandler


class statHandler(CommandHandler):
    def register(self):
        @self.app.on_message(filters.command("stat"))
        async def stat_handler(client, message):
            if not self.auth.is_authorized(message.chat.id):
                await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è: /start <–ø–∞—Ä–æ–ª—å>")
                return

            errors = []
            lines = []
            fmt = lambda n: f"{int(n):,}".replace(",", " ")

            yt_ok = False
            yt_block = []
            try:
                yt_raw = self.youtube._get_channel_core_stats(self.youtube_channel_id)
                if yt_raw is None:
                    raise RuntimeError("–¥–∞–Ω–Ω—ã–µ YouTube –ø—É—Å—Ç—ã–µ")
                if isinstance(yt_raw, str):
                    import json as _json
                    yt = _json.loads(yt_raw)
                elif isinstance(yt_raw, dict):
                    yt = yt_raw
                else:
                    raise RuntimeError("–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ YouTube")

                views = yt.get("views")
                subs = yt.get("subs")
                videos = yt.get("videos")
                last24 = yt.get("videos_last_24h")

                yt_block += [
                    "üì∫ YouTube:",
                    f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {fmt(views) if views is not None else '‚Äî'}",
                    f"‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {fmt(subs) if subs is not None else '‚Äî'}",
                    f"‚Ä¢ –í–∏–¥–µ–æ –Ω–∞ –∫–∞–Ω–∞–ª–µ: {fmt(videos) if videos is not None else '‚Äî'}",
                    f"‚Ä¢ –í–∏–¥–µ–æ –∑–∞ 24 —á–∞—Å–∞: {fmt(last24) if last24 is not None else '‚Äî'}",
                ]
                yt_ok = True
            except Exception as e:
                errors.append(f"YouTube: {e}")

            gs_ok = False
            gs_block = []
            try:
                info = self.worksheet.get_info_metrics(sheet_name="stat")
                gs_block += [
                    "ü§ñ n8n Agent :",
                    f"‚Ä¢ –í–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {fmt(info.get('videos_processed', 0))}",
                    f"‚Ä¢ –ö–ª–∏–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {fmt(info.get('clips_processed', 0))}",
                    f"‚Ä¢ –í–∏–¥–µ–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {fmt(info.get('videos_in_queue', 0))}",
                    f"‚Ä¢ –ö–ª–∏–ø–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {fmt(info.get('clips_in_queue', 0))}",
                ]
                gs_ok = True
            except Exception as e:
                errors.append(f"Google Sheets: {e}")

            if yt_ok:
                lines += yt_block
            if gs_ok:
                if lines:
                    lines.append("")
                lines += gs_block

            if errors:
                if lines:
                    lines.append("")
                lines.append("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
                for err in errors:
                    lines.append(f"‚Ä¢ {err}")

            if not yt_ok and not gs_ok:
                await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∏ –∏–∑ YouTube, –Ω–∏ –∏–∑ Google Sheets.\n" + "\n".join(f"‚Ä¢ {e}" for e in errors))
                return

            await message.reply("\n".join(lines))